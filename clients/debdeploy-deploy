#! /usr/bin/python3
# -*- coding: utf-8 -*-
"""Module for deploying DEB packages on wide scale."""

import argparse
import json
import logging
import os
import re
import subprocess
import sys
import collections

from logging.handlers import RotatingFileHandler

from debian import deb822

if os.geteuid() != 0:
    print("debdeploy needs to be run as root")
    sys.exit(1)

logger = logging.getLogger('debdeploy')

def parse_args(argv):
    """Parse and validate a list of arguments."""
    p = argparse.ArgumentParser(
        description='debdeploy-deploy - Deploy a software update')
    p.add_argument('--run-apt-update', action='store_true',
                   help='If enabled, run apt-get update during deployments')
    p.add_argument('--verbose', action='store_true', help='Include full output of apt')
    p.add_argument('--console', action='store_true', help='Enable additional console output')
    p.add_argument('--source', action='store', required=True,
                   help='The name of the source package to be updated')
    p.add_argument('--updatespec', action='store', nargs='+', required=True,
                   help=('The identifier for the update, an underscore-separated string with: '
                         ' distro ID, distro release, fixed version'))
    p.add_argument('--transition', action='store', nargs='+',
                   help=('By default only existing binary packages are upgraded, this option allows to'
                         'specify that a package gets upgraded to a different binary package name. Passed'
                         ' as underscore-separated string with: '
                         ' current binary package name, new binary package name, keep|remove'))
    p.add_argument('--downgrade', action='store_true', help='Allow downgrading package versions',
                   default=False)

    args = p.parse_args(argv)

    for spec in args.updatespec:
        if spec.count('_') != 2:
            p.error('Malformed update spec: ' + spec)

    if args.transition:
        for spec in args.transition:
            if spec.count('_') != 2:
                p.error('Malformed transition spec: ' + spec)

    return args


def setup_logger(verbose=False, console_output=False):
    log_file = '/var/log/debdeploy/debdeploy.log'

    log_path = os.path.dirname(log_file)
    if not os.path.exists(log_path):
        os.makedirs(log_path, 0o770)

    log_formatter = logging.Formatter(fmt='%(asctime)s (%(levelname)s) %(message)s')
    log_handler = RotatingFileHandler(log_file, maxBytes=(5 * (1024**2)), backupCount=30)
    log_handler.setFormatter(log_formatter)
    logger.addHandler(log_handler)
    logger.raiseExceptions = False

    if console_output:
        console = logging.StreamHandler()
        logger.addHandler(console)

    if verbose:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)


def get_os_version():
    os_id = ''
    os_version = 'undef'  # Usually not used, but can be used to track unstable

    try:
        with open('/etc/os-release', 'r') as data:
            lines = data.read().splitlines()
    except IOError:
        logger.info('Could not open /etc/os-release')
        return 'invalid'

    for line in lines:
        if line.startswith('ID='):
            os_id = line.split('=')[1].strip().replace('"', '')
        if line.startswith('VERSION_ID='):
            os_version = line.split('=')[1].strip().replace('"', '')

    if not os_id:
        logger.info('Failed to parse OS release, no distro ID specified')
        return 'invalid'

    return os_id + '_' + os_version


def get_installed_binary_packages(source):
    """Detect all locally installed binary packages of a given source package."""
    # The only resource we can use for that is parsing the /var/lib/dpkg/status
    # file. The format is a bit erratic: The Source: line is only present for
    # binary packages not having the same name as the binary package
    installed_binary_packages = []
    for pkg in deb822.Packages.iter_paragraphs(open('/var/lib/dpkg/status')):

        # skip packages in deinstalled status ("rc" in dpkg). These are irrelevant for
        # upgrades and cause problems when binary package names have changed (since
        # package installations are forced with a specific version which is not available
        # for those outdated binary package names)
        installation_status = pkg['Status'].split()[0]
        if installation_status == 'deinstall':
            continue

        # Source packages which have had a binNMU have a Source: entry with the source
        # package version in brackets, so strip these
        # If no Source: entry is present in /var/lib/dpkg/status, then the source package
        # name is identical to the binary package name
        if 'Source' in pkg and re.sub(r'\(.*?\)', '', pkg['Source']).strip() == source:
            installed_binary_packages.append(pkg['Package'])
        elif 'Package' in pkg and pkg['Package'] == source:
            installed_binary_packages.append(pkg['Package'])

    return installed_binary_packages


def list_pkgs():
    """Returns a dictionary of installed Debian package name -> version.

    It is mostly used to determine whether packages were updated, installed or removed.
    """
    pkgs = {}

    try:
        osarch = subprocess.check_output(['dpkg', '--print-architecture'], universal_newlines=True)
    except subprocess.CalledProcessError as e:
        logger.info('Could not determine host architecture: %s', e.returncode)
        sys.exit(1)

    try:
        installed_packages = subprocess.check_output(
            ['dpkg-query',
             "--showformat='${Status} ${Package} ${Version} ${Architecture}\n'",
             '-W'], universal_newlines=True)
    except subprocess.CalledProcessError as e:
        logger.info('Could not determine list of installed packages: %s', e.returncode)
        sys.exit(1)

    for line in installed_packages.splitlines():
        cols = line.split()
        try:
            if len(cols) == 6:
                linetype, status, name, version_num, arch = [cols[x] for x in (0, 2, 3, 4, 5)]
        except ValueError:
            continue

        if arch != 'all' and osarch == 'amd64' and osarch != arch:
            name += ':{0}'.format(arch)
        if ('install' in linetype or 'hold' in linetype) and 'installed' in status:
            pkgs[name] = version_num

    return pkgs


def install_pkgs(binary_packages, version_num, downgrade=False):
    """Installs software updates via apt.

    binary_packages: A list of Debian binary package names to update (list of tuples)
    downgrade: If enabled, version downgrades are allowed (required for rollbacks
    to earlier versions)

    Returns a tuple of the apt exit code and the output of the installation process
    """
    targets = []
    for pkg in binary_packages:
        if version_num is None:
            targets.append(pkg)
        else:
            targets.append('{0}={1}'.format(pkg, version_num.lstrip('=')))

    cmd = ['apt-get', '-q', '-y']
    if downgrade:
        cmd.append('--force-yes')
    cmd = cmd + ['-o', 'DPkg::Options::=--force-confold']
    cmd = cmd + ['-o', 'DPkg::Options::=--force-confdef']
    cmd.append('install')
    cmd.extend(targets)

    logger.debug('apt invocation: %s', cmd)

    # Prevent interactive debconf prompts if e.g. a conffile got modified
    current_env = os.environ.copy()
    current_env["DEBIAN_FRONTEND"] = "noninteractive"

    try:
        update = (0, subprocess.check_output(cmd, stderr=subprocess.STDOUT,
                                             env=current_env,
                                             universal_newlines=True))
    except subprocess.CalledProcessError as e:
        update = (e.returncode, e.output)

    return update


def remove_packages(packages, purge=False):
    """Removes a list of packages

    packages: A list of Debian binary package names to remove (list of strings)
    purge: If enabled, packages are removed with the --purge option of apt-get, which
           also removes conffiles

    Returns a tuple of the apt exit code and the output of the installation process
    """

    cmd = ['/usr/bin/apt-get']
    if purge:
        cmd.append('--purge')
    cmd.append('remove')
    cmd.append('-y')
    cmd.extend(packages)

    logger.debug('apt invocation: %s', cmd)

    try:
        removal = (0, subprocess.check_output(cmd, stderr=subprocess.STDOUT,
                                             universal_newlines=True))
    except subprocess.CalledProcessError as e:
        removal = (e.returncode, e.output)

    return removal


def result(success, status, updated_packages):
    '''
    Generates a JSON data set to return to Cumin.
    success: Did an error occur or not? (boolean)
    status: Status code (string)
    updated_packages: dictionary sorted by binary package names with the
        previous and the new version
    '''

    data = collections.OrderedDict()
    data['success'] = success
    data['status'] = status
    data['data'] = updated_packages

    return json.dumps(data)


def main():
    """Update packages.

    Updates all installed binary packages of the source package to the
    specified version.
    """
    args = parse_args(sys.argv[1:])

    setup_logger(args.verbose, console_output=args.console)

    versions = {}
    for spec in args.updatespec:
        distro, version = spec.rsplit('_', 1)
        versions[distro] = version

    transitions = {}
    cleanup_packages = []
    if args.transition:
        for spec in args.transition:
            old_pkgname, new_pkgname, retain = spec.split('_')
            transitions[old_pkgname] = new_pkgname
            if retain == 'remove':
                cleanup_packages.append(old_pkgname)

    installed_distro = get_os_version()
    if installed_distro == 'invalid':
        return result(False, 'INVALID_DISTRO', {})

    if versions.get(installed_distro, None) is None:
        logger.info("Update doesn't apply to the installed distribution (%s)", installed_distro)
        return result(True, "OSDIFFERS", {})

    installed_binary_packages = get_installed_binary_packages(args.source)
    logger.debug('Installed binary packages for %s: %s', args.source, installed_binary_packages)

    if len(installed_binary_packages) == 0:
        logger.info('No binary packages installed for source package %s', args.source)
        return result(True, "NOBINARY", {})

    if args.run_apt_update:
        try:
            subprocess.call(['apt-get', 'update'])
        except subprocess.CalledProcessError as e:
            logger.info('apt-get update failed: %s', e.returncode)

    packages_to_upgrade = [transitions.get(pkg, pkg) for pkg in installed_binary_packages]

    if cleanup_packages:
        remove_packages(cleanup_packages)

    old = list_pkgs()
    apt_output = install_pkgs(packages_to_upgrade, versions.get(installed_distro, None),
                              downgrade=args.downgrade)
    new = list_pkgs()

    old_keys = set(old.keys())
    new_keys = set(new.keys())

    intersect = old_keys.intersection(new_keys)
    modified = {x: (old[x], new[x]) for x in intersect if old[x] != new[x]}

    logger.info('Modified packages: %s', modified)

    if not modified:
        return result(True, 'NOCHANGE', modified)

    return result(True, 'UPDATES', modified)


if __name__ == '__main__':
    print(main())

# Local variables:
# mode: python
# End:
